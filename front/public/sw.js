!function(){"use strict";const e=(t="analytics",n="actions",{upgradeneeded(){indexedDB.open(t).onupgradeneeded=e=>{console.info("DB opened successfully"),e.target.result.createObjectStore(n)}},success(e){indexedDB.open(t).onsuccess=t=>{t.target.result.transaction(n,"readwrite").objectStore(n).add(e,Date.now())}},objectStore(){const e=indexedDB.open(t);return new Promise((t=>{e.onsuccess=e=>{const s=e.target.result;t(s.transaction(n,"readwrite").objectStore(n))}}))}});var t,n;self.addEventListener("install",(e=>{console.info("analytics: SW installed")})),self.addEventListener("activate",(t=>{console.info("analytics: SW activated"),e.upgradeneeded()})),self.addEventListener("fetch",(t=>{t.request.url.endsWith("/api/analytics")&&(navigator.onLine?(console.info("SENDING online data"),e.objectStore().then((t=>{t.getAll().onsuccess=t=>{const n=t.target.result;Promise.all(n.map((e=>(async(e,t)=>await fetch("http://localhost:4000/api/analytics",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({actionList:t})}))(0,e)))).then((()=>{e.objectStore().then((e=>e.clear()))}))}}))):t.request.json().then((t=>{console.info("SAVING offline data",t),e.success(t)})))}))}(),function(){const e="app-shop-v0.1.0",t=["/","/static/js/bundle.js"];self.addEventListener("install",(n=>{n.waitUntil(caches.open(e).then((e=>{e.addAll(t)}))),console.info("pwa: SW installed")})),self.addEventListener("activate",(t=>{t.waitUntil(caches.keys().then((t=>Promise.all(t.filter((t=>t!=e)).map((e=>caches.delete(e)))))))})),self.addEventListener("fetch",(e=>{e.respondWith(caches.match(e.request).then((t=>t||!e.request.url.endsWith("/api/analytics")&&fetch(e.request))))}))}();